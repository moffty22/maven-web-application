pipeline {
    agent any
    //options{}
    //triggers{}
    
    tools {
        maven 'maven3.9.9'
    }
    
    environment {
        IMAGE_NAME = 'edsam22/maven-web-app'
        IMAGE_TAG = "${IMAGE_NAME}:${env.GIT_COMMIT}"
        IMAGE_REPO = "maven-web-app-deploy-k8"
        ARGOCD_TOKEN = credentials('argocd-token')
        GITHUB_TOKEN = credentials('github')
        VERSION = "${env.BUILD_ID}-${env.GIT_COMMIT}"
        
    }

    stages {
        stage('1. Clone Code') {
            steps {
                sh "echo Cloning the latest app version"
                git 'https://github.com/moffty22/maven-web-application.git'
            }
        }

        stage('Test + Build') {
            steps {
                sh "echo Running unit tests"
                sh "mvn clean package"
                sh "echo Test successful and backup artifacts created"
            }
        }

        stage('Code Quality') {
            steps {
                sh "echo Running detailed code analysis"
                // Uncomment if you have SonarQube configured
                // sh "mvn sonar:sonar"
                sh "echo All conditions met/passed"
            }
        }

        stage('Upload Artifacts') {
            steps {
                sh "echo Running artifact upload"
                // Uncomment if you deploy to Nexus
                // sh "mvn deploy"
                sh "echo Artifacts backed up in Nexus"
            }
        }

        stage('Login to DockerHub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker_cred', passwordVariable: 'password', usernameVariable: 'username')]) {
                    sh "echo $password | docker login -u $username --password-stdin"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh "echo Creating Docker image"
                sh "docker build -t ${IMAGE_TAG} ."
                sh 'docker image ls'
            }
        }

        stage('Push Docker Image') {
            steps {
                sh "docker push ${IMAGE_TAG}"
                sh "echo Docker image pushed successfully"
            }
        }

        stage('Clone Repo') {
            steps {
                script {
                    if (fileExists('maven-web-app-deploy-k8')) {
                        echo 'Repo already exists - Pulling latest changes'
                        dir('maven-web-app-deploy-k8') {
                            sh 'git pull'
                        }
                    } else {
                        echo 'Repo does not exist - Cloning the repo'
                        sh 'git clone https://github.com/moffty22/maven-web-app-deploy-k8.git'
                    }
                }
            }
        }

        stage('Update Manifest') {
            steps {
                    //git branch: 'main', url: 'https://github.com/moffty22/maven-web-app-deploy-k8.git', credentialsId: 'github'
                   // sh 'ls -l stage/'
               dir('maven-web-app-deploy-k8/stage') {
                    sh '''
                        sed -i "s#edsam22/maven-web-app.*#${IMAGE_REPO}/${IMAGE_NAME}:${VERSION}#g" deployment.yaml
                        //sed -i "s/edsam22/maven-web-app.*/${IMAGE_NAME}:${VERSION}/g" maven-web-app-deploy-k8/blob/main/stage/deployment.yaml
                       // sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" maven-web-app-deploy-k8/blob/main/stage/deployment.yaml
                        cat deployment.yaml
                    '''
                }
            }
        }

        stage('Commit & Push') {
            steps {
                dir('maven-web-app-deploy-k8') {
                    sh '''
                        git config --global user.email 'amponsah.edward@gmail.com'
                        git remote set-url origin https://$GITHUB_TOKEN@github.com/moffty22/maven-web-app-deploy-k8.git
                        git checkout main
                        git add -A
                        git commit -m "Updated image version for Build - $VERSION"
                        git push origin main
                    '''
                }
            }
        }
    }
}
